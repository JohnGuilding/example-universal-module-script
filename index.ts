import { createSmartAccountClient } from "permissionless";
import { entryPoint07Address } from "viem/account-abstraction";
import { toSafeSmartAccount } from "permissionless/accounts";
import { erc7579Actions } from "permissionless/actions/erc7579";
import {
  createPublicClient,
  encodeAbiParameters,
  encodeFunctionData,
  http,
  keccak256,
  parseAbiParameters,
} from "viem";
import { baseSepolia } from "viem/chains";
import { readContract } from "wagmi/actions";
import { universalEmailRecoveryModule } from "./contracts.base-sepolia.json";
import { abi as universalEmailRecoveryModuleAbi } from "./abi/UniversalEmailRecoveryModule.json";
import { createPimlicoClient } from "permissionless/clients/pimlico";
import axios from "axios";
import { buildPoseidon } from "circomlibjs";

// Install module and configure recovery

const owner = "your owner address";
const apiKey = "YOUR_PIMLICO_API_KEY";
const bundlerUrl = `https://api.pimlico.io/v2/basesepolia/rpc?apikey=${apiKey}`;
const rpcUrl = `https://base-sepolia.g.alchemy.com/v2/${rpcAirKey}`;

const publicClient = createPublicClient({
  transport: http(rpcUrl),
});

const pimlicoClient = createPimlicoClient({
  transport: http(bundlerUrl),
  entryPoint: {
    address: entryPoint07Address,
    version: "0.7",
  },
});

const safeAccount = await toSafeSmartAccount({
  client: publicClient,
  owners: [owner],
  version: "1.4.1",
  entryPoint: {
    address: entryPoint07Address,
    version: "0.7",
  },
  safe4337ModuleAddress: "0x7579EE8307284F293B1927136486880611F20002",
  erc7579LaunchpadAddress: "0x7579011aB74c46090561ea277Ba79D510c6C00ff",
  attesters: ["0x000000333034E9f539ce08819E12c1b8Cb29084d"], // This address belongs to Rhinestone. By designating them as attesters, you authorize that only modules explicitly approved by Rhinestone can be installed on your safe.
  attestersThreshold: 1,
});
const safeWalletAddress = safeWalletAddress;

const smartAccountClient = createSmartAccountClient({
  account: safeAccount,
  chain: baseSepolia,
  bundlerTransport: http(bundlerUrl),
  paymaster: pimlicoClient,
  userOperation: {
    estimateFeesPerGas: async () => {
      return (await pimlicoClient.getUserOperationGasPrice()).fast;
    },
  },
}).extend(erc7579Actions());

const universalEmailRecoveryModuleAddress =
  "0x36A470159F8170ad262B9518095a9FeD0824e7dD";
const guardianEmail = "guardian@gmail.com";

function bytesToHex(bytes: Uint8Array): string {
  return [...bytes]
    .reverse()
    .map((x) => x.toString(16).padStart(2, "0"))
    .join("");
}

const poseidon = await buildPoseidon();
const accountCodeBytes: Uint8Array = poseidon.F.random();
const accountCode = bytesToHex(accountCodeBytes);

const { guardianSalt } = await axios({
  method: "POST",
  url: `${relayerApiUrl}/getAccountSalt`,
  data: {
    account_code: accountCode,
    email_addr: guardianEmail,
  },
});

// The guardian address is generated by sending the user's account address and guardian salt to the computeEmailAuthAddress function
const guardianAddr = (await readContract(wagmiConfig, {
  abi: universalEmailRecoveryModuleAbi,
  address: universalEmailRecoveryModule as `0x${string}`,
  functionName: "computeEmailAuthAddress",
  args: [safeWalletAddress, guardianSalt],
})) as string;

const account: `0x${string}` = safeWalletAddress as `0x${string}`;
const isInstalledContext = new Uint8Array([0]);
const functionSelector = keccak256(
  new TextEncoder().encode("swapOwner(address,address,address)")
).slice(0, 10);
const guardians = [guardianAddr];
const guardianWeights = [1n];
const threshold = 1n;
const delay = 0n; // seconds
const expiry = 2n * 7n * 24n * 60n * 60n; // 2 weeks in seconds

// Convert Uint8Array to hex string without using Buffer
const toHexString = (bytes) =>
  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");

const moduleData = encodeAbiParameters(
  parseAbiParameters(
    "address, bytes, bytes4, address[], uint256[], uint256, uint256, uint256"
  ),
  [
    account,
    `0x${toHexString(isInstalledContext)}`,
    functionSelector as `0x${string}`,
    guardians as `0x${string}`[],
    guardianWeights,
    threshold,
    delay,
    expiry,
  ]
);
const userOpHash = await smartAccountClient.installModule({
  type: "executor",
  address: universalEmailRecoveryModuleAddress,
  context: moduleData,
});

const receipt = await pimlicoClient.waitForUserOperationReceipt({
  hash: userOpHash,
});

// Handle Acceptance

// This function fetches the command template for the acceptanceRequest API call. The command template will be in the following format: [['Accept', "guardian", "request", "for", "{ethAddr}"]]
const subject = await readContract(wagmiConfig, {
  abi: universalEmailRecoveryModuleAbi,
  address: universalEmailRecoveryModule as `0x${string}`,
  functionName: "acceptanceCommandTemplates",
  args: [],
});

const templateIdx = 1;
const handleAcceptanceCommand = subject[0]
  .join()
  .replaceAll(",", " ")
  .replace("{ethAddr}", safeWalletAddress);

const { handleAcceptanceData } = await axios({
  method: "POST",
  url: `${relayerApiUrl}/acceptanceRequest`,
  data: {
    controller_eth_addr: universalEmailRecoveryModuleAddress,
    guardian_email_addr: guardianEmail,
    account_code: accountCode,
    template_idx: templateIdx,
    command: handleAcceptanceCommand,
  },
});
const { request_id: requestId } = handleAcceptanceData;

// Handle Recovery

// This function fetches the command template for the recoveryRequest API call. The command template will be in the following format: ['Recover', 'account', '{ethAddr}', 'using', 'recovery', 'hash', '{string}']
const processRecoveryCommand = (await readContract(wagmiConfig, {
  abi: universalEmailRecoveryModuleAbi,
  address: universalEmailRecoveryModule as `0x${string}`,
  functionName: "recoveryCommandTemplates",
  args: [],
})) as [][];

const { processRecoveryData } = await axios({
  method: "POST",
  url: `${relayerApiUrl}/recoveryRequest`,
  data: {
    controller_eth_addr: universalEmailRecoveryModuleAddress,
    guardian_email_addr: guardianEmail,
    template_idx: templateIdx,
    command: processRecoveryCommand,
  },
});
const { request_id: processRecoveryDataRequestId } = processRecoveryData;

// Complete Recovery

const previousOwnerInLinkedList = "previous owner in linked list";
const oldOwner = "old owner address";
const newOwner = "new owner address";

const recoveryCallData = encodeFunctionData({
  abi: safeAbi,
  functionName: "swapOwner",
  args: [previousOwnerInLinkedList, oldOwner, newOwner],
});

const recoveryData = encodeAbiParameters(
  parseAbiParameters(
    "address, bytes"
  ),
  [
    safeWalletAddress,
    recoveryCallData
  ]
);

const data = await axios({
  method: "POST",
  url: `${relayerApiUrl}/completeRequest`,
  data: {
    controller_eth_addr: universalEmailRecoveryModuleAddress,
    account_eth_addr: safeWalletAddress,
    complete_calldata: recoveryData,
  },
});
